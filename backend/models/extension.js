const mongoose = require('mongoose');

const extensionSchema = new mongoose.Schema({
  // The userExtension field corresponds to the extension number
  userExtension: {
    type: String,
    required: true,
    // Removed 'unique: true' as per user's request to handle duplication in controller
    trim: true,
  },
  displayName: {
    type: String,
    required: true,
    trim: true,
  },
  outboundCID: {
    type: String,
    default: '',
  },
  emergencyCID: {
    type: String,
    default: '',
  },
  secret: {
    type: String,
    required: true,
  },
  // General Settings (as per AddExtensionFormData)
  languageCode: { type: String, default: 'en' },
  selectUserDirectory: { type: String, default: 'PBX Internal Directory' },
  linkToDefaultUser: { type: String, default: 'Create New User' },
  useCustomUsername: { type: Boolean, default: false },
  username: { type: String, default: '' },
  passwordForNewUser: { type: String, default: '' },
  groups: { type: [String], default: ['All Users'] },

  // Advanced Tab Fields
  didDescription: { type: String, default: '' },
  addInboundDID: { type: String, default: '' },
  addInboundCID: { type: String, default: '' },
  customContext: { type: String, default: 'ALLOW ALL (Default)' },
  dtmfSignaling: { type: String, default: 'RFC 4733' },
  defaultUser: { type: String, default: '' },
  trustRPID: { type: Boolean, default: false },
  sendConnectedLine: { type: Boolean, default: false },
  userEqualsPhone: { type: Boolean, default: false },
  sendRPID: { type: String, default: 'Send P-Asserted-Identity header' },
  qualifyFrequency: { type: Number, default: 60 },
  transport: { type: String, default: '0.0.0.0-ws' },
  enableAVPF: { type: Boolean, default: false },
  enableICESupport: { type: Boolean, default: false },
  enableRtcpMux: { type: Boolean, default: false },
  callGroups: { type: String, default: '' },
  pickupGroups: { type: String, default: '' },
  disallowedCodecs: { type: String, default: '' },
  allowedCodecs: { type: String, default: '' },
  dial: { type: String, default: '' },
  mailbox: { type: String, default: '' },
  voicemailExtension: { type: String, default: '' },
  accountcode: { type: String, default: '' },
  maxContacts: { type: Number, default: 1 },
  removeExisting: { type: Boolean, default: true },
  mediaUseReceivedTransport: { type: Boolean, default: true },
  rtpSymmetric: { type: Boolean, default: true },
  rewriteContact: { type: Boolean, default: true },
  forceRport: { type: Boolean, default: true },
  mwiSubscriptionType: { type: String, default: 'Auto' },
  aggregateMWI: { type: Boolean, default: false },
  enableWebRTCDefaults: { type: Boolean, default: false },
  maxAudioStreams: { type: Number, default: 1 },
  maxVideoStreams: { type: Number, default: 1 },
  mediaEncryption: { type: String, default: 'None' },
  sessionTimers: { type: String, default: 'Yes' },
  timerExpirationPeriod: { type: Number, default: 90 },
  directMedia: { type: Boolean, default: true },
  mediaAddress: { type: String, default: '' },
  allowNonEncryptedMedia: { type: Boolean, default: false },
  referBlindProgress: { type: Boolean, default: false },
  deviceStateBusyAt: { type: Number, default: 0 },
  matchPermit: { type: String, default: '' },
  maximumExpiration: { type: Number, default: 7200 },
  minimumExpiration: { type: Number, default: 60 },
  rtpTimeout: { type: Number, default: 0 },
  rtpHoldTimeout: { type: Number, default: 0 },
  outboundProxy: { type: String, default: '' },
  outboundAuth: { type: Boolean, default: false },
  messagesContext: { type: String, default: '' },
  cidNumAlias: { type: String, default: '' },
  sipAlias: { type: String, default: '' },
  asteriskDialOptions: { type: String, default: 'HhTtr' },
  ringTime: { type: String, default: 'Default' },
  extensionRingerVolumeOverride: { type: String, default: 'None' },
  callForwardingTime: { type: String, default: 'Default' },
  outboundConcurrencyLimit: { type: Number, default: 3 },
  callWaiting: { type: Boolean, default: true },
  callWaitingTone: { type: Boolean, default: true },
  callScreening: { type: String, default: 'Disable' },
  internalAutoAnswer: { type: String, default: 'Disable' },
  intercomMode: { type: Boolean, default: true },
  queueStateDetection: { type: String, default: 'Use State' },
  inboundExternalCalls: { type: String, default: 'Don\'t Care' },
  outboundExternalCalls: { type: String, default: 'Don\'t Care' },
  inboundInternalCalls: { type: String, default: 'Don\'t Care' },
  outboundInternalCalls: { type: String, default: 'Don\'t Care' },
  onDemandRecording: { type: String, default: 'Disable' },
  recordPriorityPolicy: { type: Number, default: 10 },
  dictationService: { type: String, default: 'Disabled' },
  dictationFormat: { type: String, default: 'Ogg Vorbis' },
  dictationEmailAddress: { type: String, default: 'dictate@freepbx.org' },
  dictationFromAddress: { type: String, default: 'dictate@freepbx.org' },
  defaultDirectory: { type: String, default: 'Include' },
  enableDTLS: { type: Boolean, default: false },
  autoGenerateCertificate: { type: Boolean, default: false },
  useCertificate: { type: String, default: 'default' },
  dtlsVerify: { type: String, default: 'Fingerprint' },
  dtlsSetup: { type: String, default: 'Act/Pass' },
  dtlsRekeyInterval: { type: Number, default: 0 },
  noAnswerDestination: { type: String, default: 'Unavail Voicemail if Enabled' },
  noAnswerCIDPrefix: { type: String, default: '' },
  busyDestination: { type: String, default: 'Busy Voicemail if Enabled' },
  busyCIDPrefix: { type: String, default: '' },
  notReachableDestination: { type: String, default: 'Unavail Voicemail if Enabled' },
  notReachableCIDPrefix: { type: String, default: '' },


}, { timestamps: true });

// Ensure no unique index is created on 'extension' or 'userExtension' at the schema level.
// If an index was previously created in MongoDB, it needs to be dropped manually in the database.
// For example, in MongoDB shell: db.extensions.dropIndex("extension_1")

const Extension = mongoose.model('Extension', extensionSchema);

module.exports = Extension;
